<?php
/**
 * @version 1.1
 * @package PayPal IPN processor
 * @copyright (c) 2016 Image Innovation
 * @license GPL, http://www.gnu.org/copyleft/gpl.html
 * @author Max A. Schneider
 */

// no direct access
defined( '_JEXEC' ) or die( 'Restricted access' );

jimport('joomla.plugin');
jimport('joomla.log.log');

class plgSystemPPIPN extends JPlugin
{
	protected $autoloadLanguage = true;
	protected $db;
	public $params;
	protected $name;
	protected $app;
	
	/**
	 * IPN handler for PayPal, for use with RSForm Pro. 
	 * 
	 * The handler will post the payer information in the appropriate form submission
	 *
	 * Note that the function name of the listener is matched to RSform!Pro's hook for the post payment processor
	 * If you wish to include the fields stored by this plugin in emails to be subsequently
	 * generated by RSForm, be sure to arrange the order so that this plugin is executed before the RSForm payment processor
	 * 
	 * @param  none
	 *
	 * @return none
	 *
	 * @access public
	 */
	function rsfp_afterConfirmPayment($SubmissionId) {
		if ($this->params['log']):
			JLog::addLogger(
					array('text_file' => $this->params['logName']),
					JLog::ALL,
					array($this->name) // only our messages
					);
		endif;
		
		if($this->params['log'] && 4 <= $this->params['logLevel']):
			JLog::add('Arrived in event handler', JLog::DEBUG, $this->name);
		endif;
		
		$input = JFactory::getApplication()->input;
		// Notification receipt from Paypal
		$plugin_task =  $input->getString('plugin_task', '');

		if($this->params['log'] && 4 <= $this->params['logLevel']):
			JLog::add("Plugin task {$plugin_task}", JLog::DEBUG, $this->name);
		endif;

		switch($plugin_task){
			case 'paypal.notify':
				$this->saveIPNData($SubmissionId);
				break;
					
			default:
				break;
		}
	}
	
	function saveIPNData($SubmissionId) {
		if($this->params['log'] && 4 <= $this->params['logLevel']): 
			JLog::add('Arrived in plugin task', JLog::DEBUG, $this->name);
		endif;
		
		// update submission with txn_id
		if ($this->params['storeData']):
			// Retrieve the original post
			$input = JFactory::getApplication()->input;
			$postData = $input->getArray(array_flip(array_keys($_POST)));
	
			// get the associated form submission
			$db = JFactory::getDBO();
	
			// fields used for transaction validation
			$code = $db->getEscaped(JRequest::getVar('code'));
			$formId = JRequest::getInt('formId');
	
			if($this->params['log'] && 3 <= $this->params['logLevel']):
				JLog::add("Form ID: {$formId} Submission ID: {$SubmissionId}", JLog::INFO, $this->name);
			endif;
			
			foreach ($postData as $key => $value) {
					$this::updateDb($key, $value, $db, $formId, $SubmissionId);
			}
		endif;
		
		if($this->params['log'] && 3 <= $this->params['logLevel']):
			JLog::add("-------------------------------------------", JLog::INFO, $this->name);
		endif;
	}

	// update submission with supplied argument from input
	function updateDb($argument, $value, $db, $formId, $submissionId) {
		$query = $db->getQuery(true);
		$conditions = array(
			$db->quoteName("FormId") . " = " . $formId,
			$db->quoteName("SubmissionId") . " = " . $submissionId,
			$db->quoteName("FieldName") . " = " . $db->quote("ipn_{$argument}")
		);
		$query
			->update($db->quoteName("#__rsform_submission_values"))
			->set($db->quoteName("FieldValue") . " = " . $db->quote($value))
			->where($conditions);
		$db->setQuery($query);
		$db->execute();

		$count = $db->getAffectedRows();

		if($this->params['log'] && 3 <= $this->params['logLevel']):
			JLog::add("Updating ipn_{$argument} to {$value}, rows updated: {$count}", JLog::DEBUG, $this->name);
		endif;
	}
}
?>